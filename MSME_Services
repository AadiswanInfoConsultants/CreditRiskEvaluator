import pandas as pd
import numpy as np

class ServicesScoring:
    def __init__(self):
        self.metric_weights = {
            "Financial Metrics": 0.30,
            "Banking & Creditworthiness": 0.40,
            "Business Health & Risk Factors": 0.30
        }

        self.submetric_weights = {
            "Financial Metrics": {
                "Revenue Growth": 0.08,
                "EBITDA Margin": 0.05,
                "Receivables Turnover": 0.03,
                "ROE": 0.05,
                "ROCE": 0.05,
                "DSO": 0.04
            },
            "Banking & Creditworthiness": {
                "Quick Ratio": 0.10,
                "Current Ratio": 0.08,
                "D/E Ratio": 0.08,
                "Interest Coverage": 0.06,
                "DSR": 0.08
            },
            "Business Health & Risk Factors": {
                "Business Vintage": 0.06,
                "Customer Profile": 0.06,
                "Industry Outlook": 0.08,
                "Altman Z-Score": 0.10
            }
        }

        self.scoring_criteria = {
            "Financial Metrics": {
                "Revenue Growth": [(14, float('inf'), 5), (10, 14, 4), (6, 10, 3), (3, 6, 2), (float('-inf'), 3, 1)],
                "EBITDA Margin": [(18, float('inf'), 5), (12, 18, 4), (8, 12, 3), (5, 8, 2), (float('-inf'), 5, 1)],
                "Receivables Turnover": [(8, float('inf'), 5), (6, 8, 4), (4, 6, 3), (2, 4, 2), (float('-inf'), 2, 1)],
                "ROE": [(15, float('inf'), 5), (10, 15, 4), (6, 10, 3), (3, 6, 2), (float('-inf'), 3, 1)],
                "ROCE": [(12, float('inf'), 5), (8, 12, 4), (6, 8, 3), (3, 6, 2), (float('-inf'), 3, 1)],
                "DSO": [(float('-inf'), 30, 5), (30, 45, 4), (45, 60, 3), (60, 90, 2), (90, float('inf'), 1)]
            },
            "Banking & Creditworthiness": {
                "Quick Ratio": [(2.0, float('inf'), 5), (1.5, 2.0, 4), (1.2, 1.5, 3), (1.0, 1.2, 2), (float('-inf'), 1.0, 1)],
                "Current Ratio": [(2.5, float('inf'), 5), (2.0, 2.5, 4), (1.5, 2.0, 3), (1.0, 1.5, 2), (float('-inf'), 1.0, 1)],
                "D/E Ratio": [(float('-inf'), 1.0, 5), (1.0, 2.0, 4), (2.0, 3.0, 3), (3.0, 4.0, 2), (4.0, float('inf'), 1)],
                "Interest Coverage": [(4.0, float('inf'), 5), (2.5, 4.0, 4), (1.5, 2.5, 3), (1.0, 1.5, 2), (float('-inf'), 1.0, 1)],
                "DSR": [(3.5, float('inf'), 5), (2.5, 3.5, 4), (1.5, 2.5, 3), (1.0, 1.5, 2), (float('-inf'), 1.0, 1)]
            },
            "Business Health & Risk Factors": {
                "Business Vintage": [(10, float('inf'), 5), (7, 10, 4), (4, 7, 3), (2, 4, 2), (float('-inf'), 2, 1)],
                "Customer Profile": {"Large Clients": 5, "Mid-Sized Clients": 4, "Mixed Clients": 3, "Small Clients": 2, "Unstable Clients": 1},
                "Industry Outlook": {"Strong Growth": 5, "Moderate Growth": 4, "Stable": 3, "Declining": 2, "Severe Decline": 1},
                "Altman Z-Score": [(3.0, float('inf'), 5), (2.5, 3.0, 4), (1.8, 2.5, 3), (1.0, 1.8, 2), (float('-inf'), 1.0, 1)]
            }
        }

    def score_metric(self, category, metric, value):
        if metric in ["Customer Profile", "Industry Outlook"]:
            return self.scoring_criteria[category][metric].get(value, 1)
        for lower, upper, score in self.scoring_criteria[category][metric]:
            if lower <= value < upper:
                return score
        return 1

    def compute_weighted_score(self, df):
        scores = []
        for _, row in df.iterrows():
            total_score = 0
            for category, sub_metrics in self.submetric_weights.items():
                category_score = sum(
                    self.score_metric(category, metric, row[metric]) * weight for metric, weight in sub_metrics.items()
                )
                total_score += category_score * self.metric_weights[category]
            scores.append(total_score)
        df["Final Score"] = scores
        return df

# Load data from CSV
df = pd.read_csv("company_data.csv") #put your cv file here
scoring_system = ServicesScoring()
df = scoring_system.compute_weighted_score(df)
df.to_csv("scored_companies.csv", index=False)
print("Scoring complete. Results saved to scored_companies.csv.")
