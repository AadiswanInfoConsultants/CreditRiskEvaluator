import numpy as np
import pandas as pd

class MSMEScoring:
    def __init__(self):
        self.metric_weights = {
            "Financial Metrics": 0.40,
            "Banking & Creditworthiness": 0.35,
            "Business Health & Risk Factors": 0.25
        }

        self.submetric_weights = {
            "Financial Metrics": {
                "Revenue Growth": 0.12,
                "EBITDA Margin": 0.07,
                "Receivables Turnover": 0.02,
                "ROE": 0.08,
                "ROCE": 0.08,
                "DSO": 0.03
            },
            "Banking & Creditworthiness": {
                "Quick Ratio": 0.05,
                "Current Ratio": 0.05,
                "D/E Ratio": 0.10,
                "Interest Coverage": 0.08,
                "DSR": 0.07
            },
            "Business Health & Risk Factors": {
                "Business Vintage": 0.05,
                "Customer Profile": 0.05,
                "Industry Outlook": 0.06,
                "Altman Z-Score": 0.09
            }
        }

        self.scoring_criteria = {
            "Financial Metrics": {
                "Revenue Growth": [(12, float('inf'), 5), (8, 12, 4), (5, 8, 3), (2, 5, 2), (float('-inf'), 2, 1)],
                "ROE": [(15, float('inf'), 5), (10, 15, 4), (6, 10, 3), (3, 6, 2), (float('-inf'), 3, 1)],
                "ROCE": [(15, float('inf'), 5), (10, 15, 4), (6, 10, 3), (3, 6, 2), (float('-inf'), 3, 1)],
                "EBITDA Margin": [(15, float('inf'), 5), (10, 15, 4), (5, 10, 3), (3, 5, 2), (float('-inf'), 3, 1)],
                "Receivables Turnover": [(8, float('inf'), 5), (6, 8, 4), (4, 6, 3), (2, 4, 2), (float('-inf'), 2, 1)],
                "DSO (Days Sales Outstanding)": [(float('-inf'), 30, 5), (30, 45, 4), (45, 60, 3), (60, 90, 2), (90, float('inf'), 1)],
            },
            "Banking & Creditworthiness": {
                "D/E Ratio": [(float('-inf'), 1.0, 5), (1.0, 2.0, 4), (2.0, 3.0, 3), (3.0, 4.0, 2), (4.0, float('inf'), 1)],
                "Quick Ratio": [(1.5, float('inf'), 5), (1.2, 1.5, 4), (1.0, 1.2, 3), (0.8, 1.0, 2), (float('-inf'), 0.8, 1)],
                "Current Ratio": [(2.0, float('inf'), 5), (1.5, 2.0, 4), (1.0, 1.5, 3), (0.8, 1.0, 2), (float('-inf'), 0.8, 1)],
                "Interest Coverage": [(4.0, float('inf'), 5), (2.5, 4.0, 4), (1.5, 2.5, 3), (1.0, 1.5, 2), (float('-inf'), 1.0, 1)],
                "Debt Servicing Ratio (DSR)": [(3.5, float('inf'), 5), (2.5, 3.5, 4), (1.5, 2.5, 3), (1.0, 1.5, 2), (float('-inf'), 1.0, 1)],
            },
            "Business Health & Risk Factors": {
                "Business Vintage": [(10, float('inf'), 5), (7, 10, 4), (4, 7, 3), (2, 4, 2), (float('-inf'), 2, 1)],
                "Customer Profile": [("Large Clients", 5), ("Mid-Sized Clients", 4), ("Mixed Clients", 3), ("Small Clients", 2), ("Unstable Clients", 1)],
                "Industry Outlook": [("Strong Growth", 5), ("Moderate Growth", 4), ("Stable", 3), ("Declining", 2), ("Severe Decline", 1)],
                "Altman Z-Score": [(3.0, float('inf'), 5), (2.5, 3.0, 4), (1.8, 2.5, 3), (1.0, 1.8, 2), (float('-inf'), 1.0, 1)]
            }
        }

    def score_metric(self, category, metric, value):
        if metric in ["Customer Profile", "Industry Outlook"]:
            return self.scoring_criteria[category][metric].get(value, 1)
        for lower, upper, score in self.scoring_criteria[category][metric]:
            if lower <= value < upper:
                return score
        return 1

    def compute_weighted_score(self, company_scores):
        normalized_scores = {}
        for category, sub_metrics in self.submetric_weights.items():
            total_weight = sum(sub_metrics.values())
            category_score = sum(
                self.score_metric(category, metric, company_scores[metric]) * (weight / total_weight)
                for metric, weight in sub_metrics.items()
            )
            normalized_scores[category] = category_score
        final_score = sum(normalized_scores[cat] * self.metric_weights[cat] for cat in normalized_scores)
        return normalized_scores, final_score

    def process_csv(self, file_path):
        df = pd.read_csv(file_path)
        results = []
        for _, row in df.iterrows():
            company_scores = row.to_dict()
            category_scores, final_score = self.compute_weighted_score(company_scores)
            results.append({"Company": company_scores.get("Company", "Unknown"), **category_scores, "Final Score": final_score})
        return pd.DataFrame(results)


scoring_system = MSMEScoring()
file_path = "/content/drive/MyDrive/data/dummy_company_data.csv"
scored_df = scoring_system.process_csv(file_path)
scored_df.to_csv("scored_output.csv", index=False)
print(scored_df)
